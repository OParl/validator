#!/usr/bin/env python3
"""
The MIT License (MIT)

Copyright (c) 2017 Stefan Graupner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import argparse

from core.validator import Validator

def init_validator(endpoint, options):
    validator = Validator(endpoint=endpoint, options=options)
    validator.run()

def configure_argument_parser():
    parser = argparse.ArgumentParser(
        prog='validate',
        epilog='''
            The OParl Validator is distributed under the terms of the
            MIT License. To learn more, run `./validate --license`
        '''
    )

    output_options = parser.add_mutually_exclusive_group()
    output_options.add_argument(
        "-v",
        help="configure the output verbosity (this is only relevant for direct cli usage, " \
             "writing to file will always output everything)",
        dest="verbosity",
        action="count",
        default=0,
    )
    output_options.add_argument(
        "--silent",
        help="disable CLI output",
        default=False,
        action="store_true",
        dest="silent"
    )

    format_options = parser.add_mutually_exclusive_group()
    format_options.add_argument(
        '--format',
        '-f',
        help='Output format, either `text` or `json`, defaults to `text`',
        action='store',
        dest='format',
        default='text'
    )

    format_options.add_argument(
        '--text', '--plain',
        help='Output format: text',
        action='store_const',
        dest='format',
        const='text'
    )

    format_options.add_argument(
        '--json',
        help='Output format: json',
        action='store_const',
        dest='format',
        const='json'
    )

    parser.add_argument(
        "--read",
        help="read a stored result",
        default=False,
        action="store_true",
        dest="read"
    )

    parser.add_argument(
        "--porcelain",
        help="Json Patch formatted output during execution (does not affect result format)",
        default=False,
        action="store_true"
    )

    parser.add_argument(
        "-o",
        help='configure the result output file',
        dest="result",
        action="store",
        default='result.txt'
    )

    parser.add_argument(
        '--license',
        help='print the license text and exit',
        action='store_true',
        default=False
    )

    parser.add_argument(
        '--num_workers',
        help='Set the number of validation worker threads',
        action='store',
        default=3
    ),

    parser.add_argument(
        '--queue_size',
        help='Define the size of the entity queue',
        action='store',
        default=1000
    )

    parser.add_argument(
        'location',
        help='Either a file name (read mode) or an endpoint url',
        nargs='+'
    )

    return parser

def run_argument_parser(parser):
    args = parser.parse_args()

    if args.license:
        with open('LICENSE') as f:
            for line in f.readlines():
                print(line, end='')
        exit()

    if args.verbosity > 5:
        print("Stahp!")
        exit()

    if args.verbosity > 3:
        print("You cannot possibly make me embarrass myself that much.")
        exit()

    return args

def main():
    parser = configure_argument_parser()
    args = run_argument_parser(parser)

    for location in args.location:
        init_validator(location, args)


if __name__ == "__main__":
    main()